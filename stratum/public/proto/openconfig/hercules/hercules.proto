// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// openconfig.hercules is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - yang/google-hercules.yang
//  - yang/hercules-flow-params.yang
//  - yang/hercules-interface-flow-params.yang
//  - yang/hercules-interfaces.yang
//  - yang/hercules-node-flow-params.yang
//  - yang/hercules-platform-asic-bcm.yang
//  - yang/hercules-platform-chassis.yang
//  - yang/hercules-platform-linecard.yang
//  - yang/hercules-platform-node.yang
//  - yang/hercules-platform-port.yang
//  - yang/hercules-platform.yang
//  - yang/hercules-qos.yang
//  - yang/hercules.yang
//  - yang/iana-if-type.yang
//  - yang/ietf-interfaces.yang
//  - yang/ietf-yang-types.yang
//  - yang/openconfig-alarms.yang
//  - yang/openconfig-extensions.yang
//  - yang/openconfig-if-aggregate.yang
//  - yang/openconfig-if-ethernet.yang
//  - yang/openconfig-if-ip.yang
//  - yang/openconfig-inet-types.yang
//  - yang/openconfig-interfaces.yang
//  - yang/openconfig-lacp.yang
//  - yang/openconfig-packet-match-types.yang
//  - yang/openconfig-packet-match.yang
//  - yang/openconfig-platform-linecard.yang
//  - yang/openconfig-platform-port.yang
//  - yang/openconfig-platform-transceiver.yang
//  - yang/openconfig-platform-types.yang
//  - yang/openconfig-platform.yang
//  - yang/openconfig-qos-elements.yang
//  - yang/openconfig-qos-interfaces.yang
//  - yang/openconfig-qos-types.yang
//  - yang/openconfig-qos.yang
//  - yang/openconfig-transport-types.yang
//  - yang/openconfig-types.yang
//  - yang/openconfig-vlan-types.yang
//  - yang/openconfig-vlan.yang
//  - yang/openconfig-yang-types.yang
// Include paths:
//   - third_party/stratum/public/proto/...
syntax = "proto3";

package openconfig.hercules;

import "third_party/stratum/public/proto/ywrapper.proto";
import "third_party/stratum/public/proto/yext.proto";

message FlowControl {
  message Config {
  }
  message Interface {
    message Config {
    }
    message Sets {
      message Set {
        message Config {
          ywrapper.StringValue name = 418266422 [(yext.schemapath) = "/flow-control/interface/sets/set/config/name"];
        }
        message State {
          ywrapper.StringValue name = 374647977 [(yext.schemapath) = "/flow-control/interface/sets/set/state/name"];
        }
        Config config = 223390356 [(yext.schemapath) = "/flow-control/interface/sets/set/config"];
        State state = 30875437 [(yext.schemapath) = "/flow-control/interface/sets/set/state"];
      }
      message SetKey {
        string name = 1 [(yext.schemapath) = "/flow-control/interface/sets/set/name"];
        Set set = 2;
      }
      repeated SetKey set = 316422899 [(yext.schemapath) = "/flow-control/interface/sets/set"];
    }
    message State {
    }
    Config config = 229901563 [(yext.schemapath) = "/flow-control/interface/config"];
    Sets sets = 361498450 [(yext.schemapath) = "/flow-control/interface/sets"];
    State state = 130320508 [(yext.schemapath) = "/flow-control/interface/state"];
  }
  message Node {
    message Config {
    }
    message Sets {
      message Set {
        message Config {
          ywrapper.StringValue name = 454297759 [(yext.schemapath) = "/flow-control/node/sets/set/config/name"];
        }
        message State {
          ywrapper.StringValue name = 328592626 [(yext.schemapath) = "/flow-control/node/sets/set/state/name"];
        }
        Config config = 442611223 [(yext.schemapath) = "/flow-control/node/sets/set/config"];
        State state = 318371784 [(yext.schemapath) = "/flow-control/node/sets/set/state"];
      }
      message SetKey {
        string name = 1 [(yext.schemapath) = "/flow-control/node/sets/set/name"];
        Set set = 2;
      }
      repeated SetKey set = 468937782 [(yext.schemapath) = "/flow-control/node/sets/set"];
    }
    message State {
    }
    Config config = 144405482 [(yext.schemapath) = "/flow-control/node/config"];
    Sets sets = 345592275 [(yext.schemapath) = "/flow-control/node/sets"];
    State state = 36345351 [(yext.schemapath) = "/flow-control/node/state"];
  }
  message State {
  }
  Config config = 515973407 [(yext.schemapath) = "/flow-control/config"];
  Interface interface = 165738538 [(yext.schemapath) = "/flow-control/interface"];
  Node node = 111795621 [(yext.schemapath) = "/flow-control/node"];
  State state = 37529552 [(yext.schemapath) = "/flow-control/state"];
}
